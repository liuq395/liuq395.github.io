[{"title":"GAMES101:04Transformation","url":"/2024/11/24/GAMES101-04Transformation-1/","content":"旋转-theta 角度就是旋转 theta 角的转置对于旋转矩阵，逆矩阵就等于它的转置。如果一个矩阵的逆矩阵等于转置矩阵，那么它是一个正交矩阵，所以旋转矩阵是正交矩阵\n1. 三维变换再次应用齐次坐标\n增加一个维度\n3D 点&#x3D;(x, y, z,1)\n3D 向量&#x3D;(x, y, z,0)\n\n\n(x, y, z, w)(w!&#x3D;0)表示的是 3D 的点(x&#x2F;w, y&#x2F;w, z&#x2F;w)\n\n使用 4*4 矩阵描述仿射变换\n平移的量仍然是最后一列tx,ty,tz,1\n在仿射变换的时候最后一行依然是 0 0 0 1\n顺序：对应到非齐次坐标是先线性变换（乘一个矩阵）再平移（加一个列向量）\n\n旋转\n绕轴旋转：关于 y 轴和其他两轴写法上的一些不同\n一般性旋转：Rxyz(a,b,c) &#x3D; Rx(a)Ry(b)Rz(c);想象一个飞机的三个方向旋转，飞机头可以上下，飞机可以左右转，飞机可以倾斜（想象机翼向一侧倾斜），这三个方向相当于绕 xyz 轴旋转，组合它们可以表示任意的旋转\n罗德里格斯旋转公式：给出一个旋转轴向量 n 和一个旋转角度 α，得到旋转矩阵\n旋转轴向量默认过原点\n如果想要任意也就是不一定过原点的轴怎么办？利用上节课的思想，先把所有东西都平移使得轴过原点，然后旋转，再全部平移回去，所得的结果是一样的\n两个向量的叉乘可以写成一个矩阵的形式乘一个另一个向量，最终也得到一个向量。就是公式中的 N 矩阵\n\n\n\n2. 观测变换 Viewing transfomation2.1 视图&#x2F;相机变换 View&#x2F;Camera TransformationIntro : 三维空间转换为二维图片，怎么看\n\n什么是视图变换\n怎么拍一张照片：MVP 变换\nModel transformation：找一个场景，安排入镜的人\n&#x3D;&#x3D;View transformation：找一个好角度，调整相机的视角&#x3D;&#x3D;\nProjection transformation：“茄子！”\n\n\n如何进行视图变换\n定义相机\nposition 点 e\nLook-at&#x2F;gaze direction 向量 g\nUp direction:向量 t，相机本身的旋转，有些像横屏竖屏（相机上一根草的指向）\n\n\n相对运动 - 如果相机和所有物体进行相同的移动，那么“照片”将会一直是相同的 - 让相机永远：放在原点，look at -Z, up at Y&#x3D;&#x3D;没听懂&#x3D;&#x3D;\n怎么把相机移动到标准位置-数学表示变换矩阵 Mview&#x3D;Rview Tview：\n首先计算平移矩阵 Tview\n旋转到规范轴不好求，可以求它的逆矩阵，也就是从规范到相机原来的轴\n旋转矩阵的逆矩阵就是它的转置矩阵，就可以求其变换矩阵了\n\n\n\n2.2 投影变换正交投影没有近大远小的现象\n\n正交投影认为相机无限远\n透视投影认为相机是一个点，和画面形成一个锥\n\n2.2.1 正交投影\n一种简单的理解方式： - 此前说的让相机放在原点，look at -Z, up at Y - 这种方法将 z 轴去掉得到的就会自然是一个二维的平面图 - 进行移动和缩放让所有的结果都映射的[-1，1]^2 的一个小正方形里\n[!question] 如何区分物体的前后？\n\n\n正式的操作：把空间中的任意长方体（六个数就可以表示，左右，上下，前后坐标[l,r]×[b,t]×[f,n]）映射到一个正则、规范、标准的正方体[-1,1]^3 的正方体中。\n只需要把中心平移到原点，然后缩放\n一个问题：表示 z 轴区间中远要比近小，这是因为我们是沿着-z 的方向（看向-z，眼眼睛在靠正向一边）去看的\n数学表示变换矩阵：\n\n\n\n2.2.2 透视投影\n最广泛的投影，平行线不再平行\n对于齐次坐标的表示，一个点(x,y,z,1),同时乘一个不为 0 的系数(kx,ky,kz,k)依然表示空间中的同一个点，既然如此，同时乘 z 也是一样(xz,yz,z^2,z)也表示同一个点\n\n\n[!question] 中间的点挤压后会被推向近的平面还是远的平面\n\n"}]